plugins {
    id 'org.springframework.boot' version '1.4.3.RELEASE'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'war'
apply plugin: 'idea'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

version = '0.1-SNAPSHOT'

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
    }
}

dependencies {
    // Spring Boot
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    // Logging
    compile('org.apache.logging.log4j:log4j-api')
    compile('org.apache.logging.log4j:log4j-core')

    // Testing
    testCompile('org.codehaus.groovy:groovy-all')
    testCompile('org.spockframework:spock-core')

    // Database
    runtime('org.apache.derby:derby')
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all"
}

checkstyle {
    toolVersion = '7.3'
    sourceSets = [sourceSets.main]

    ignoreFailures = false
}

findbugs {
    toolVersion = '3.0.1'
    reportLevel = 'medium'
    sourceSets = [sourceSets.main]

    ignoreFailures = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
